<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张兴亚的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zxyyee.cn/"/>
  <updated>2019-09-03T11:08:31.093Z</updated>
  <id>https://zxyyee.cn/</id>
  
  <author>
    <name>Xingya</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux基础操作</title>
    <link href="https://zxyyee.cn/post/linux%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C.html"/>
    <id>https://zxyyee.cn/post/linux基础操作.html</id>
    <published>2019-07-28T11:12:31.000Z</published>
    <updated>2019-09-03T11:08:31.093Z</updated>
    
    <content type="html"><![CDATA[<h4 id="建立文件夹"><a href="#建立文件夹" class="headerlink" title="建立文件夹"></a>建立文件夹</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir      <span class="comment">#建立单目录</span></span><br><span class="line"></span><br><span class="line">mkdir -p    <span class="comment">#建立多层目录</span></span><br><span class="line"></span><br><span class="line">eg：mkdir -p  <span class="number">123</span>/<span class="number">456</span>/<span class="number">789</span>     <span class="comment">#在Desktop中创建123文件夹，在123中创建456文件夹，在456中创建789文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现了文件夹的多级目录创建</span></span><br></pre></td></tr></table></figure><h4 id="文件夹的删除"><a href="#文件夹的删除" class="headerlink" title="文件夹的删除"></a>文件夹的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm  file          <span class="comment"># 删除file'文件夹，但是会提示是否删除，选择yes或者no</span></span><br><span class="line"></span><br><span class="line">rm -f file          <span class="comment">#强行删除文件不提示</span></span><br><span class="line"></span><br><span class="line">rm -fr dir      <span class="comment"># 强行删除目录本身和里面的内容补提时</span></span><br></pre></td></tr></table></figure><h4 id="文件的编辑"><a href="#文件的编辑" class="headerlink" title="文件的编辑"></a>文件的编辑</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim  file    <span class="comment">#进入file文件编译</span></span><br><span class="line"></span><br><span class="line">i：<span class="comment">#插入</span></span><br><span class="line"></span><br><span class="line">esc+:</span><br><span class="line"></span><br><span class="line">wq</span><br><span class="line"></span><br><span class="line">！<span class="comment">#强制执行</span></span><br></pre></td></tr></table></figure><h4 id="文件查看常用命令"><a href="#文件查看常用命令" class="headerlink" title="文件查看常用命令"></a>文件查看常用命令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat file             <span class="comment">#输出文件的所有内容</span></span><br><span class="line"></span><br><span class="line">cat -b file         <span class="comment">#输出文件所有内容并加入行号</span></span><br><span class="line"></span><br><span class="line">less                 <span class="comment">#分页浏览        在分页浏览下：上|下        向上|向下移动一行              &lt;pgup&gt;|&lt;pgdn&gt;      向上|向下移动一页</span></span><br><span class="line"></span><br><span class="line">/关键字           <span class="comment">#高亮显示关键字，n向下匹配N向上匹配</span></span><br><span class="line"></span><br><span class="line">q                      <span class="comment">#退出</span></span><br><span class="line"></span><br><span class="line">tail -n               <span class="comment">#显示文件的后多少行</span></span><br></pre></td></tr></table></figure><h4 id="文件的复制和移动"><a href="#文件的复制和移动" class="headerlink" title="文件的复制和移动"></a>文件的复制和移动</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cp file file222                                <span class="comment">#文件复制(将文件file复制到file222中）</span></span><br><span class="line"></span><br><span class="line">cp file file222 <span class="number">123</span>/                       <span class="comment">#复制多个文件（file file222）到目录（123）中</span></span><br><span class="line"></span><br><span class="line">cp -r  file    <span class="number">123</span>/                            <span class="comment">#复制目录（123）</span></span><br><span class="line"></span><br><span class="line">mv  file file222              <span class="comment">#重名命</span></span><br><span class="line"></span><br><span class="line">mv  file  <span class="number">123</span>                 <span class="comment">#移动</span></span><br><span class="line"></span><br><span class="line">mv file   <span class="number">123</span>                <span class="comment">#移动目录</span></span><br></pre></td></tr></table></figure><h4 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h4><p>相对路径：（则必须有前提条件，其实在系统底层依然是绝对路径执行，只是用户看到的简略移动）</p><p>文件相对当前系统位置的一个名称简写<br>文件名称省略了当前路径的值<br>只有当前在此目录中时可以使用<br>文件名称不以/开头<br>文件名称会自动在字符前加入’pwd’显示的路径</p><p>绝对路径：</p><p>是文件在系统中真实的位置<br>任何时间都可以精确表示一个文件的名称<br>文件名称以/开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwd            <span class="comment">#显示当前工作目录</span></span><br><span class="line"></span><br><span class="line">cd               <span class="comment">#切换当前工作目录</span></span><br><span class="line"></span><br><span class="line">cd /mnt      <span class="comment">#切换到/mnt目录中</span></span><br><span class="line"></span><br><span class="line">cd -             <span class="comment">#进入当前目录之前所在目录中</span></span><br><span class="line"></span><br><span class="line">cd ~student        <span class="comment">#进入到student用户家目录</span></span><br></pre></td></tr></table></figure><h4 id="系统目录各个文件夹介绍："><a href="#系统目录各个文件夹介绍：" class="headerlink" title="系统目录各个文件夹介绍："></a>系统目录各个文件夹介绍：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/bin        <span class="comment">##二进制文件，系统常规命令</span></span><br><span class="line"></span><br><span class="line">/boot        <span class="comment">##系统启动分区，系统启动时读取的文件</span></span><br><span class="line"></span><br><span class="line">/dev        <span class="comment">##设备文件</span></span><br><span class="line"></span><br><span class="line">/etc        <span class="comment">##大多数配置文件</span></span><br><span class="line"></span><br><span class="line">/home        <span class="comment">##普通用户的家目录</span></span><br><span class="line"></span><br><span class="line">/lib        <span class="comment">##32位函数库</span></span><br><span class="line"></span><br><span class="line">/lib64        <span class="comment">##64位库</span></span><br><span class="line"></span><br><span class="line">/media        <span class="comment">##手动临时挂载点</span></span><br><span class="line"></span><br><span class="line">/mnt        <span class="comment">##手动临时挂载点</span></span><br><span class="line"></span><br><span class="line">/opt        <span class="comment">##第三方软件安装位置</span></span><br><span class="line"></span><br><span class="line">/proc        <span class="comment">##进程信息及硬件信息</span></span><br><span class="line"></span><br><span class="line">/root        <span class="comment">##超级用户家目录</span></span><br><span class="line"></span><br><span class="line">/run        <span class="comment">##临时设备的默认挂载点</span></span><br><span class="line"></span><br><span class="line">/sbin        <span class="comment">##系统管理命令</span></span><br><span class="line"></span><br><span class="line">/srv        <span class="comment">##数据</span></span><br><span class="line"></span><br><span class="line">/var        <span class="comment">##数据</span></span><br><span class="line"></span><br><span class="line">/sys        <span class="comment">##内核相关信息</span></span><br><span class="line"></span><br><span class="line">/tmp        <span class="comment">##临时文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux
    
    </summary>
    
      <category term="Linux" scheme="https://zxyyee.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://zxyyee.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>部署爬虫与Django</title>
    <link href="https://zxyyee.cn/post/%E9%83%A8%E7%BD%B2%E7%88%AC%E8%99%AB%E4%B8%8EDjango.html"/>
    <id>https://zxyyee.cn/post/部署爬虫与Django.html</id>
    <published>2019-05-11T11:14:42.000Z</published>
    <updated>2019-09-03T11:08:03.622Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-编写爬虫"><a href="#1-编写爬虫" class="headerlink" title="1.编写爬虫"></a>1.编写爬虫</h4><h4 id="2-部署环境"><a href="#2-部署环境" class="headerlink" title="2.部署环境"></a>2.部署环境</h4><p>pip install scrapyd<br>pip install scrapyd-client<br>启动scrapyd的服务：cmd:&gt;scrapyd（必须处于开启状态）<br>在爬虫根目录执行：scrapyd-deploy,如果提示不是内部命令，需要修改配置文件。</p><h4 id="3-发布工程到scrapyd"><a href="#3-发布工程到scrapyd" class="headerlink" title="3.发布工程到scrapyd"></a>3.发布工程到scrapyd</h4><p>修改scrapy.cfg，去掉url前的#<br>进入到scrapy项目根目录，执行：scrapyd-deploy <target> -p <projectname>提示：（target:scrapy.cfg中[deploy:***]）（projectname：scrapy.cfg中project = XXX）<br>（#url中的#去掉）</projectname></target></p><h4 id="4-启动爬虫"><a href="#4-启动爬虫" class="headerlink" title="4.启动爬虫"></a>4.启动爬虫</h4><p>（命令式启动爬虫：<code>curl http://localhost:6800/schedule.json -d project=default -d spider=somespider</code>）</p><h4 id="5-启动django"><a href="#5-启动django" class="headerlink" title="5.启动django"></a>5.启动django</h4><p><code>cmd：python manage.py runserver</code></p><p>1.创建django项目，并编写models.py,启动django项目</p><p>2.Django项目根目录下创建Scrapy项目<br>（这是scrapy-djangoitem所需要的配置）<br>配置Django嵌入，在Scrapy的settings.py中加入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.dirname(os.path.abspath(<span class="string">'.'</span>)))</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">'DJANGO_SETTINGS_MODULE'</span>] = <span class="string">'django项目名.settings'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"></span><br><span class="line">django.setup()</span><br></pre></td></tr></table></figure><p>3.编写爬虫<br>4.item.py中引入Django模型类（pip install scrapy-djangoitem）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 子应用 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapyabckgItem</span><span class="params">(DjangoItem)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 此处必须起名为django_model,主爬虫中使用item['title']=xxx</span></span><br><span class="line"></span><br><span class="line">    django_model = models.AbckgModel</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>pipelines.py中调用save()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapyabckgPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入到数据库</span></span><br><span class="line"></span><br><span class="line">        item.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  item <span class="comment">#将item传给下一个管道继续处理</span></span><br></pre></td></tr></table></figure><h4 id="6-启动爬虫-用命令，并非scrapyd启动-：scrapy-crawl-abckg"><a href="#6-启动爬虫-用命令，并非scrapyd启动-：scrapy-crawl-abckg" class="headerlink" title="6.启动爬虫(用命令，并非scrapyd启动)：scrapy  crawl  abckg"></a>6.启动爬虫(用命令，并非<code>scrapyd</code>启动)：<code>scrapy  crawl  abckg</code></h4><h4 id="7-刷新django-admin后台"><a href="#7-刷新django-admin后台" class="headerlink" title="7.刷新django-admin后台"></a>7.刷新django-admin后台</h4>]]></content>
    
    <summary type="html">
    
      分布式
    
    </summary>
    
      <category term="爬虫" scheme="https://zxyyee.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zxyyee.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>pandas方法</title>
    <link href="https://zxyyee.cn/post/pandas%E6%96%B9%E6%B3%95.html"/>
    <id>https://zxyyee.cn/post/pandas方法.html</id>
    <published>2019-03-28T11:13:34.000Z</published>
    <updated>2019-09-03T11:06:32.252Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导入pandas库，一般都会用到numpy库"><a href="#导入pandas库，一般都会用到numpy库" class="headerlink" title="导入pandas库，一般都会用到numpy库"></a>导入pandas库，一般都会用到<code>numpy</code>库</h4><h2 id="使用iloc按位置区域提取数据"><a href="#使用iloc按位置区域提取数据" class="headerlink" title="使用iloc按位置区域提取数据"></a>使用iloc按位置区域提取数据</h2><p><code>df_inner.iloc[:3,:2</code>] #冒号前后的数字不再是索引的标签名称，而是数据所在的位置，从0开始，前三行，前两列。</p><h2 id="适应iloc按位置单独提起数据"><a href="#适应iloc按位置单独提起数据" class="headerlink" title="适应iloc按位置单独提起数据"></a>适应iloc按位置单独提起数据</h2><p><code>df_inner.iloc[[0,2,5],[4,5]]</code> #提取第0、2、5行，4、5列</p><h2 id="导入CSV等文件："><a href="#导入CSV等文件：" class="headerlink" title="导入CSV等文件："></a>导入CSV等文件：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = pd.DataFrame(pd.read_csv(‘name.csv’,header=<span class="number">1</span>)) </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(pd.read_excel(‘name.xlsx’))</span><br></pre></td></tr></table></figure><h2 id="维度查看："><a href="#维度查看：" class="headerlink" title="维度查看："></a>维度查看：</h2><h5 id="df-shape"><a href="#df-shape" class="headerlink" title="df.shape"></a><code>df.shape</code></h5><h2 id="数据表基本信息（维度、列名称、数据格式、所占空间等）："><a href="#数据表基本信息（维度、列名称、数据格式、所占空间等）：" class="headerlink" title="数据表基本信息（维度、列名称、数据格式、所占空间等）："></a>数据表基本信息（维度、列名称、数据格式、所占空间等）：</h2><h5 id="df-info"><a href="#df-info" class="headerlink" title="df.info()"></a><code>df.info()</code></h5><h2 id="每一列数据的格式："><a href="#每一列数据的格式：" class="headerlink" title="每一列数据的格式："></a>每一列数据的格式：</h2><h5 id="df-dtypes"><a href="#df-dtypes" class="headerlink" title="df.dtypes"></a><code>df.dtypes</code></h5><h2 id="某一列格式："><a href="#某一列格式：" class="headerlink" title="某一列格式："></a>某一列格式：</h2><h5 id="df-‘B’-dtype"><a href="#df-‘B’-dtype" class="headerlink" title="df[‘B’].dtype"></a><code>df[‘B’].dtype</code></h5><h2 id="空值："><a href="#空值：" class="headerlink" title="空值："></a>空值：</h2><h5 id="df-isnull"><a href="#df-isnull" class="headerlink" title="df.isnull()"></a><code>df.isnull()</code></h5><h2 id="查看某一列空值："><a href="#查看某一列空值：" class="headerlink" title="查看某一列空值："></a>查看某一列空值：</h2><h5 id="df-isnull-1"><a href="#df-isnull-1" class="headerlink" title="df.isnull()"></a><code>df.isnull()</code></h5><h2 id="查看某一列的唯一值："><a href="#查看某一列的唯一值：" class="headerlink" title="查看某一列的唯一值："></a>查看某一列的唯一值：</h2><h5 id="df-‘B’-unique"><a href="#df-‘B’-unique" class="headerlink" title="df[‘B’].unique()"></a><code>df[‘B’].unique()</code></h5><h2 id="查看数据表的值："><a href="#查看数据表的值：" class="headerlink" title="查看数据表的值："></a>查看数据表的值：</h2><h5 id="df-values"><a href="#df-values" class="headerlink" title="df.values"></a><code>df.values</code></h5><h2 id="查看列名称："><a href="#查看列名称：" class="headerlink" title="查看列名称："></a>查看列名称：</h2><h5 id="df-columns"><a href="#df-columns" class="headerlink" title="df.columns"></a><code>df.columns</code></h5><h2 id="1查看前10行数据、后10行数据："><a href="#1查看前10行数据、后10行数据：" class="headerlink" title="1查看前10行数据、后10行数据："></a>1查看前10行数据、后10行数据：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.head() <span class="comment">#默认前10行数据 </span></span><br><span class="line"></span><br><span class="line">df.tail() <span class="comment">#默认后10 行数据</span></span><br></pre></td></tr></table></figure><h2 id="用数字0填充空值："><a href="#用数字0填充空值：" class="headerlink" title="用数字0填充空值："></a>用数字0填充空值：</h2><h5 id="df-fillna-value-0"><a href="#df-fillna-value-0" class="headerlink" title="df.fillna(value=0)"></a><code>df.fillna(value=0)</code></h5><h2 id="使用列prince的均值对NA进行填充："><a href="#使用列prince的均值对NA进行填充：" class="headerlink" title="使用列prince的均值对NA进行填充："></a>使用列prince的均值对NA进行填充：</h2><h5 id="df-‘prince’-fillna-df-‘prince’-mean"><a href="#df-‘prince’-fillna-df-‘prince’-mean" class="headerlink" title="df[‘prince’].fillna(df[‘prince’].mean())"></a><code>df[‘prince’].fillna(df[‘prince’].mean())</code></h5><h2 id="清楚city字段的字符空格："><a href="#清楚city字段的字符空格：" class="headerlink" title="清楚city字段的字符空格："></a>清楚city字段的字符空格：</h2><h5 id="df-‘city’-df-‘city’-map-str-strip"><a href="#df-‘city’-df-‘city’-map-str-strip" class="headerlink" title="df[‘city’]=df[‘city’].map(str.strip)"></a><code>df[‘city’]=df[‘city’].map(str.strip)</code></h5><h2 id="大小写转换："><a href="#大小写转换：" class="headerlink" title="大小写转换："></a>大小写转换：</h2><h5 id="df-‘city’-df-‘city’-str-lower"><a href="#df-‘city’-df-‘city’-str-lower" class="headerlink" title="df[‘city’]=df[‘city’].str.lower()"></a><code>df[‘city’]=df[‘city’].str.lower()</code></h5><h2 id="更改数据格式："><a href="#更改数据格式：" class="headerlink" title="更改数据格式："></a>更改数据格式：</h2><h5 id="df-‘price’-astype-‘int’"><a href="#df-‘price’-astype-‘int’" class="headerlink" title="df[‘price’].astype(‘int’)"></a><code>df[‘price’].astype(‘int’)</code></h5><h2 id="更改列名称："><a href="#更改列名称：" class="headerlink" title="更改列名称："></a>更改列名称：</h2><h5 id="df-rename-columns-‘category’-‘category-size’"><a href="#df-rename-columns-‘category’-‘category-size’" class="headerlink" title="df.rename(columns={‘category’: ‘category-size’})"></a><code>df.rename(columns={‘category’: ‘category-size’})</code></h5><h2 id="删除后出现的重复值："><a href="#删除后出现的重复值：" class="headerlink" title="删除后出现的重复值："></a>删除后出现的重复值：</h2><h5 id="df-‘city’-drop-duplicates"><a href="#df-‘city’-drop-duplicates" class="headerlink" title="df[‘city’].drop_duplicates()"></a><code>df[‘city’].drop_duplicates()</code></h5><h2 id="删除先出现的重复值："><a href="#删除先出现的重复值：" class="headerlink" title="删除先出现的重复值："></a>删除先出现的重复值：</h2><h5 id="df-‘city’-drop-duplicates-keep-’last’"><a href="#df-‘city’-drop-duplicates-keep-’last’" class="headerlink" title="df[‘city’].drop_duplicates(keep=’last’)"></a><code>df[‘city’].drop_duplicates(keep=’last’)</code></h5><h2 id="数据替换："><a href="#数据替换：" class="headerlink" title="数据替换："></a>数据替换：</h2><h5 id="df-‘city’-replace-‘sh’-‘shanghai’"><a href="#df-‘city’-replace-‘sh’-‘shanghai’" class="headerlink" title="df[‘city’].replace(‘sh’, ‘shanghai’)"></a><code>df[‘city’].replace(‘sh’, ‘shanghai’)</code></h5><h2 id="使用“与”进行筛选"><a href="#使用“与”进行筛选" class="headerlink" title="使用“与”进行筛选"></a>使用“与”进行筛选</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_inner.loc[(df_inner[‘age’] &gt; <span class="number">25</span>) &amp; (df_inner[‘city’] == ‘beijing’), [‘id’,’city’,’age’,’category’,’gender’]]</span><br></pre></td></tr></table></figure><h2 id="使用“或”进行筛选"><a href="#使用“或”进行筛选" class="headerlink" title="使用“或”进行筛选"></a>使用“或”进行筛选</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_inner.loc[(df_inner[‘age’] &gt; 25) | (df_inner[‘city’] == ‘beijing’), [‘id’,’city’,’age’,’category’,’gender’]].sort([‘age’])</span><br></pre></td></tr></table></figure><h2 id="使用“非”条件进行筛选"><a href="#使用“非”条件进行筛选" class="headerlink" title="使用“非”条件进行筛选"></a>使用“非”条件进行筛选</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_inner.loc[(df_inner[‘city’] != ‘beijing’), [‘id’,’city’,’age’,’category’,’gender’]].sort([‘id’])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      pandas的一些常见方法
    
    </summary>
    
      <category term="机器学习" scheme="https://zxyyee.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://zxyyee.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://zxyyee.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://zxyyee.cn/post/Redis-0.html"/>
    <id>https://zxyyee.cn/post/Redis-0.html</id>
    <published>2019-03-18T11:13:47.000Z</published>
    <updated>2019-09-03T11:07:10.439Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis输出的持久化"><a href="#redis输出的持久化" class="headerlink" title="redis输出的持久化"></a><code>redis</code>输出的持久化</h3><h3 id="redis的五种数据类型"><a href="#redis的五种数据类型" class="headerlink" title="redis的五种数据类型"></a><code>redis</code>的五种数据类型</h3><h3 id="redis的优势"><a href="#redis的优势" class="headerlink" title="redis的优势"></a><code>redis</code>的优势</h3><h3 id="redis的事务"><a href="#redis的事务" class="headerlink" title="redis的事务"></a><code>redis</code>的事务</h3><h3 id="redis的读写性能"><a href="#redis的读写性能" class="headerlink" title="redis的读写性能"></a><code>redis</code>的读写性能</h3><h3 id="redis的密码"><a href="#redis的密码" class="headerlink" title="redis的密码"></a><code>redis</code>的密码</h3><h3 id="redis、mongo、mysql、oracle的区别"><a href="#redis、mongo、mysql、oracle的区别" class="headerlink" title="redis、mongo、mysql、oracle的区别"></a><code>redis、mongo、mysql、oracle</code>的区别</h3><h3 id="redis中字符串类型的值，最大容纳量是多少"><a href="#redis中字符串类型的值，最大容纳量是多少" class="headerlink" title="redis中字符串类型的值，最大容纳量是多少"></a><code>redis</code>中字符串类型的值，最大容纳量是多少</h3><h4 id="Redis基础知识："><a href="#Redis基础知识：" class="headerlink" title="Redis基础知识："></a><code>Redis</code>基础知识：</h4><p><code>Redis</code>是完全开源免费，遵守BSD协议，是一个高性能的键值数据库，是当前最热门的NoSQL数据库之一，也被称为数据结构服务器。<br><code>Redis</code>内存数据库，速度快，也支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。<br><code>Redis</code>不仅仅支持简单的key-value类型的数据，同时还提供了list、set、zset、hash等数据结构的存储。<br><code>Redis</code>支持数据的备份，即master-slave模式的数据备份。</p><h4 id="Redis支持事务"><a href="#Redis支持事务" class="headerlink" title="Redis支持事务"></a><code>Redis</code>支持事务</h4><p>（BSD协议：BSD开源协议是一个给于使用者很大自由的协议。<br>可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。当你发布使用了BSD协议的代码，或者以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：<br>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。<br>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。<br>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。）</p><h4 id="Redis数据持久化："><a href="#Redis数据持久化：" class="headerlink" title="Redis数据持久化："></a><code>Redis</code>数据持久化：</h4><p><code>Redis</code>的所有数据都是保存在内存中，然后不定期的通过异步方式保存到磁盘上（这称为“半持久化模式”），也可以把每一次数据变化都写到一个append only file(aof)里面（这称为“全持久化模式”）<br>由于<code>Redis</code>的数据都存放在内存中，如果没有配置持久化，<code>Redis</code>重启后数据就全丢失了，于是需要开启<code>Redis</code>的持久化功能，将数据保存到磁盘上，当<code>Redis</code>重启后可以从磁盘中恢复数据。<br><code>Redis</code>提供两种方式进行持久化：<br>RDB持久化<br>将<code>Redis</code>在内存中的数据库记录定时dump到磁盘上的RDB持久化<br>AOF持久化<br>将<code>Redis</code>的操作日志以追加的方式写入文件</p><h4 id="Redis数据类型："><a href="#Redis数据类型：" class="headerlink" title="Redis数据类型："></a><code>Redis</code>数据类型：</h4><p>string（字符串）<br>string是<code>Redis</code>最基本的类型，与<code>Memcached</code>一模一样的类型，一个key对应一个value<br>string类型是二进制安全的，意思是<code>redis</code>的string可以包含任何数据。比如jpg图片或者序列化的对象<br>string类型是<code>Redis</code>最基本的数据类型，string类型的值最大能存储512MB<br>hash（哈希）<br><code>Redis</code> hash是一个键值（key=&gt;value）对集合<br><code>Redis</code> hash是一个string类型的field和value的映射表，hash特别适合用于存储对象<br>list（列表）<br><code>Redis</code>列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）<br>set（集合）<br><code>Redis</code>的set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加、删除、查找的复杂度是O(1)<br><code>zset</code>（有序集合）<br><code>Redis</code> <code>zset</code>和set一样也是string类型元素的集合，且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。<code>Redis</code>正是通过分数来为集合中的成员进行从小到大的排序。<br><code>zset</code>的成员是唯一的，但分数（score）却可以重复</p><h4 id="Redis的读写性能："><a href="#Redis的读写性能：" class="headerlink" title="Redis的读写性能："></a><code>Redis</code>的读写性能：</h4><p>性能极高 -<code>Redis</code>能读的速度是110000/s，写的速度是81000/s 。<br>丰富的数据类型 -<code>Redis</code>支持二进制案例的string,list,hash,set,<code>zset</code>数据类型操作。<br>原子 -<code>Redis</code>的所有操作都是原子性的，同事<code>Redis</code>还支持对几个操作合并后的原子性执行。（事务）<br>丰富的特性 -<code>Redis</code>还支持publish/subscribe，通知，key过期等等特性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redis输出的持久化&quot;&gt;&lt;a href=&quot;#redis输出的持久化&quot; class=&quot;headerlink&quot; title=&quot;redis输出的持久化&quot;&gt;&lt;/a&gt;&lt;code&gt;redis&lt;/code&gt;输出的持久化&lt;/h3&gt;&lt;h3 id=&quot;redis的五种数据类型&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="数据库" scheme="https://zxyyee.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://zxyyee.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>numpy方法</title>
    <link href="https://zxyyee.cn/post/numpy%E6%96%B9%E6%B3%95.html"/>
    <id>https://zxyyee.cn/post/numpy方法.html</id>
    <published>2019-02-28T11:13:24.000Z</published>
    <updated>2019-09-03T09:39:34.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-NumPy"><a href="#1-NumPy" class="headerlink" title="1.NumPy"></a>1.NumPy</h3><p>　　NumPy是高性能科学计算和数据分析的基础包。部分功能如下：</p><p>ndarray, 具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组。<br>用于对整组数据进行快速运算的标准数学函数（无需编写循环）。<br>用于读写磁盘数据的工具以及用于操作内存映射文件的工具。<br>线性代数、随机数生成以及傅里叶变换功能。<br>用于集成C、C++、Fortran等语言编写的代码的工具。<br>　　首先要导入numpy库：import numpy as np</p><table><thead><tr><th>生成函数</th><th align="center">作用</th></tr></thead><tbody><tr><td></td><td align="center">np.array( x)</td></tr><tr><td>np.array( x, dtype)</td><td align="center">将输入数据转化为一个类型为type的ndarray</td></tr><tr><td></td><td align="center">np.asarray( array )</td></tr><tr><td>np.ones( N )</td><td align="center">生成一个N长度的一维全一ndarray</td></tr><tr><td>np.ones( N, dtype)</td><td align="center">生成一个N长度类型是dtype的一维全一ndarray</td></tr><tr><td>np.ones_like( ndarray )</td><td align="center">生成一个形状与参数相同的全一ndarray</td></tr><tr><td>np.zeros( N)</td><td align="center">生成一个N长度的一维全零ndarray</td></tr><tr><td>np.zeros( N, dtype)</td><td align="center">生成一个N长度类型位dtype的一维全零ndarray</td></tr><tr><td>np.zeros_like(ndarray)</td><td align="center">类似np.ones_like( ndarray )</td></tr><tr><td>np.empty( N )</td><td align="center">生成一个N长度的未初始化一维ndarray</td></tr><tr><td>np.empty( N, dtype)</td><td align="center">生成一个N长度类型是dtype的未初始化一维ndarray</td></tr><tr><td>np.empty(ndarray)</td><td align="center">类似np.ones_like( ndarray )</td></tr><tr><td>np.eye( N )</td><td align="center">创建一个N * N的单位矩阵（对角线为1，其余为0）</td></tr><tr><td>np.identity( N )</td><td align="center">创建一个N * N的单位矩阵（对角线为1，其余为0）</td></tr><tr><td>np.arange( num)</td><td align="center">生成一个从0到num-1步数为1的一维ndarray</td></tr><tr><td>np.arange( begin, end)</td><td align="center">生成一个从begin到end-1步数为1的一维ndarray</td></tr><tr><td>np.arange( begin, end, step)</td><td align="center">生成一个从begin到end-step的步数为step的一维ndarray</td></tr><tr><td>np.mershgrid(ndarray, ndarray,…)</td><td align="center">生成一个ndarray * ndarray * …的多维ndarray</td></tr><tr><td>np.where(cond, ndarray1, ndarray2)</td><td align="center">根据条件cond，选取ndarray1或者ndarray2，返回一个新的ndarray</td></tr><tr><td>np.in1d(ndarray, [x,y,…])</td><td align="center">检查ndarray中的元素是否等于[x,y,…]中的一个，返回bool数组</td></tr></tbody></table><table><thead><tr><th align="left">矩阵函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">np.diag( ndarray)</td><td align="left">以一维数组的形式返回方阵的对角线（或非对角线）元素</td></tr><tr><td align="left">np.diag( [x,y,…])</td><td align="left">将一维数组转化为方阵（非对角线元素为0）</td></tr><tr><td align="left">np.dot(ndarray, ndarray)</td><td align="left">矩阵乘法</td></tr><tr><td align="left">np.trace( ndarray)</td><td align="left">计算对角线元素的和</td></tr></tbody></table><table><thead><tr><th align="left">排序函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">np.sort( ndarray)</td><td align="left">排序，返回副本</td></tr><tr><td align="left">np.unique(ndarray)</td><td align="left">返回ndarray中的元素，排除重复元素之后，并进行排序</td></tr><tr><td align="left">np.intersect1d( ndarray1, ndarray2)</td><td align="left">返回二者的交集并排序。</td></tr><tr><td align="left">np.union1d( ndarray1, ndarray2)</td><td align="left">返回二者的并集并排序。</td></tr><tr><td align="left">np.setdiff1d( ndarray1, ndarray2)</td><td align="left">返回二者的差。</td></tr><tr><td align="left">np.setxor1d( ndarray1, ndarray2)</td><td align="left">返回二者的对称差</td></tr></tbody></table><table><thead><tr><th align="left">一元计算函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">np.abs(ndarray)</td><td align="left">计算绝对值</td></tr><tr><td align="left">np.fabs(ndarray)</td><td align="left">计算绝对值（非复数）</td></tr><tr><td align="left">np.mean(ndarray)</td><td align="left">求平均值</td></tr><tr><td align="left">np.sqrt(ndarray)</td><td align="left">计算x^0.5</td></tr><tr><td align="left">np.square(ndarray)</td><td align="left">计算x^2</td></tr><tr><td align="left">np.exp(ndarray)</td><td align="left">计算e^x</td></tr><tr><td align="left">log、log10、log2、log1p</td><td align="left">计算自然对数、底为10的log、底为2的log、底为(1+x)的log</td></tr><tr><td align="left">np.sign(ndarray)</td><td align="left">计算正负号：1（正）、0（0）、-1（负）</td></tr><tr><td align="left">np.ceil(ndarray)</td><td align="left">计算大于等于改值的最小整数</td></tr><tr><td align="left">np.floor(ndarray)</td><td align="left">计算小于等于该值的最大整数</td></tr><tr><td align="left">np.rint(ndarray)</td><td align="left">四舍五入到最近的整数，保留dtype</td></tr><tr><td align="left">np.modf(ndarray)</td><td align="left">将数组的小数和整数部分以两个独立的数组方式返回</td></tr><tr><td align="left">np.isnan(ndarray)</td><td align="left">返回一个判断是否是NaN的bool型数组</td></tr><tr><td align="left">np.isfinite(ndarray)</td><td align="left">返回一个判断是否是有穷（非inf，非NaN）的bool型数组</td></tr><tr><td align="left">np.isinf(ndarray)</td><td align="left">返回一个判断是否是无穷的bool型数组</td></tr><tr><td align="left">cos、cosh、sin、sinh、tan、tanh</td><td align="left">普通型和双曲型三角函数</td></tr><tr><td align="left">arccos、arccosh、arcsin、arcsinh、arctan、arctanh</td><td align="left">反三角函数和双曲型反三角函数</td></tr><tr><td align="left">np.logical_not(ndarray)</td><td align="left">计算各元素not x的真值，相当于-ndarray</td></tr></tbody></table><table><thead><tr><th align="left">多元计算函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">np.add(ndarray, ndarray)</td><td align="left">相加</td></tr><tr><td align="left">np.subtract(ndarray, ndarray)</td><td align="left">相减</td></tr><tr><td align="left">np.multiply(ndarray, ndarray)</td><td align="left">乘法</td></tr><tr><td align="left">np.divide(ndarray, ndarray)</td><td align="left">除法</td></tr><tr><td align="left">np.floor_divide(ndarray, ndarray)</td><td align="left">圆整除法（丢弃余数）</td></tr><tr><td align="left">np.power(ndarray, ndarray)</td><td align="left">次方</td></tr><tr><td align="left">np.mod(ndarray, ndarray)</td><td align="left">求模</td></tr><tr><td align="left">np.maximum(ndarray, ndarray)</td><td align="left">求最大值</td></tr><tr><td align="left">np.fmax(ndarray, ndarray)</td><td align="left">求最大值（忽略NaN）</td></tr><tr><td align="left">np.minimun(ndarray, ndarray)</td><td align="left">求最小值</td></tr><tr><td align="left">np.fmin(ndarray, ndarray)</td><td align="left">求最小值（忽略NaN）</td></tr><tr><td align="left">np.copysign(ndarray, ndarray)</td><td align="left">将参数2中的符号赋予参数1</td></tr><tr><td align="left">np.greater(ndarray, ndarray)</td><td align="left">&gt;</td></tr><tr><td align="left">np.greater_equal(ndarray, ndarray)</td><td align="left">&gt;=</td></tr><tr><td align="left">np.less(ndarray, ndarray)</td><td align="left">&lt;</td></tr><tr><td align="left">np.less_equal(ndarray, ndarray)</td><td align="left">&lt;=</td></tr><tr><td align="left">np.equal(ndarray, ndarray)</td><td align="left">==</td></tr><tr><td align="left">np.not_equal(ndarray, ndarray)</td><td align="left">!=</td></tr><tr><td align="left">logical_and(ndarray, ndarray)</td><td align="left">&amp;</td></tr><tr><td align="left">logical_or(ndarray, ndarray)</td><td align="left"><strong>|</strong></td></tr><tr><td align="left"></td><td align="left">logical_xor(ndarray, ndarray)</td></tr><tr><td align="left">np.dot( ndarray, ndarray)</td><td align="left">计算两个ndarray的矩阵内积</td></tr><tr><td align="left">np.ix_([x,y,m,n],…)</td><td align="left">生成一个索引器，用于Fancy indexing(花式索引)</td></tr></tbody></table><table><thead><tr><th align="left">文件读写</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">np.save(string, ndarray)</td><td align="left">将ndarray保存到文件名为 [string].npy 的文件中（无压缩）</td></tr><tr><td align="left">np.savez(string, ndarray1, ndarray2, …)</td><td align="left">将所有的ndarray压缩保存到文件名为[string].npy的文件中</td></tr><tr><td align="left">np.savetxt(sring, ndarray, fmt, newline=’\n’)</td><td align="left">将ndarray写入文件，格式为fmt</td></tr><tr><td align="left">np.load(string)</td><td align="left">读取文件名string的文件内容并转化为ndarray对象（或字典对象）</td></tr><tr><td align="left">np.loadtxt(string, delimiter)</td><td align="left">读取文件名string的文件内容，以delimiter为分隔符转化为ndarray</td></tr></tbody></table><p><strong>表2.1.A.2 np常用函数</strong></p><table><thead><tr><th align="left">B NumPy.ndarray函数</th><th align="left">属性：</th></tr></thead><tbody><tr><td align="left">ndarray.ndim</td><td align="left">获取ndarray的维数</td></tr><tr><td align="left">ndarray.shape</td><td align="left">获取ndarray各个维度的长度</td></tr><tr><td align="left">ndarray.dtype</td><td align="left">获取ndarray中元素的数据类型</td></tr><tr><td align="left">ndarray.T</td><td align="left">简单转置矩阵ndarray</td></tr></tbody></table><p><strong>表2.1.B.1 ndarray属性</strong></p><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ndarray.astype(dtype)</td><td align="left">转换类型，若转换失败则会出现TypeError</td></tr><tr><td align="left">ndarray.copy()</td><td align="left">复制一份ndarray(新的内存空间)</td></tr><tr><td align="left">ndarray.reshape((N,M,…))</td><td align="left">将ndarray转化为N<em>M</em>…的多维ndarray（非copy）</td></tr><tr><td align="left">ndarray.transpose((xIndex,yIndex,…))</td><td align="left">根据维索引xIndex,yIndex…进行矩阵转置，依赖于shape，不能用于一维矩阵（非copy）</td></tr><tr><td align="left">ndarray.swapaxes(xIndex,yIndex)</td><td align="left">交换维度（非copy）</td></tr></tbody></table><table><thead><tr><th align="left">计算函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ndarray.mean( axis=0 )</td><td align="left">求平均值</td></tr><tr><td align="left">ndarray.sum( axis= 0)</td><td align="left">求和</td></tr><tr><td align="left">ndarray.cumsum( axis=0)</td><td align="left">累加</td></tr><tr><td align="left">ndarray.cumprod( axis=0)</td><td align="left">累乘</td></tr><tr><td align="left">ndarray.std()</td><td align="left">方差</td></tr><tr><td align="left">ndarray.var()</td><td align="left">标准差</td></tr><tr><td align="left">ndarray.max()</td><td align="left">最大值</td></tr><tr><td align="left">ndarray.min()</td><td align="left">最小值</td></tr><tr><td align="left">ndarray.argmax()</td><td align="left">最大值索引</td></tr><tr><td align="left">ndarray.argmin()</td><td align="left">最小值索引</td></tr><tr><td align="left">ndarray.any()</td><td align="left">是否至少有一个True</td></tr><tr><td align="left">ndarray.all()</td><td align="left">是否全部为True</td></tr><tr><td align="left">ndarray.dot( ndarray)</td><td align="left">计算矩阵内积</td></tr></tbody></table><table><thead><tr><th align="left">排序函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ndarray.sort(axis=0)</td><td align="left">排序，返回源数据</td></tr></tbody></table><p><strong>表2.1.B.2 ndarray函数</strong></p><table><thead><tr><th align="left">ndarray函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ndarray[n]</td><td align="left">选取第n+1个元素</td></tr><tr><td align="left">ndarray[n:m]</td><td align="left">选取第n+1到第m个元素</td></tr><tr><td align="left">ndarray[:]</td><td align="left">选取全部元素</td></tr><tr><td align="left">ndarray[n:]</td><td align="left">选取第n+1到最后一个元素</td></tr><tr><td align="left">ndarray[:n]</td><td align="left">选取第0到第n个元素</td></tr><tr><td align="left">ndarray[ bool_ndarray ]</td><td align="left">注：bool_ndarray表示bool类型的ndarray选取为true的元素</td></tr><tr><td align="left">ndarray[[x,y,m,n]]…</td><td align="left">选取顺序和序列为x、y、m、n的ndarray</td></tr><tr><td align="left">ndarray[n,m]</td><td align="left">选取第n+1行第m+1个元素</td></tr><tr><td align="left">ndarray[n][m]</td><td align="left">选取第n+1行第m+1个元素</td></tr><tr><td align="left">ndarray[n,m,…]</td><td align="left">选取n行n列….的元素</td></tr><tr><td align="left">ndarray[n][m]….</td><td align="left">选取n行n列….的元素</td></tr></tbody></table><p><strong>表2.1.B.3 ndarray索引/切片方式</strong></p><p>　　C NumPy.random函数和属性：</p><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">seed()</td><td align="left">确定随机数生成种子</td></tr><tr><td align="left">seed(int)</td><td align="left">确定随机数生成种子</td></tr><tr><td align="left">seed(ndarray)</td><td align="left">确定随机数生成种子</td></tr><tr><td align="left">permutation(int)</td><td align="left">返回一个一维从0~9的序列的随机排列</td></tr><tr><td align="left">permutation(ndarray)</td><td align="left">返回一个序列的随机排列</td></tr><tr><td align="left">shuffle(ndarray)</td><td align="left">对一个序列就地随机排列</td></tr><tr><td align="left">rand(int)</td><td align="left">产生int个均匀分布的样本值</td></tr><tr><td align="left">randint(begin,end,num=1)</td><td align="left">从给定的begin和end随机选取num个整数</td></tr><tr><td align="left">randn(N, M, …)</td><td align="left">生成一个N<em>M</em>…的正态分布（平均值为0，标准差为1）的ndarray</td></tr><tr><td align="left">normal(size=(N,M,…))</td><td align="left">生成一个N<em>M</em>…的正态（高斯）分布的ndarray</td></tr><tr><td align="left">beta(ndarray1,ndarray2)</td><td align="left">产生beta分布的样本值，参数必须大于0</td></tr><tr><td align="left">chisquare()</td><td align="left">产生卡方分布的样本值</td></tr><tr><td align="left">gamma()</td><td align="left">产生gamma分布的样本值</td></tr><tr><td align="left">uniform()</td><td align="left">产生在[0,1)中均匀分布的样本值</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      numpy的一些常见方法
    
    </summary>
    
      <category term="机器学习" scheme="https://zxyyee.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://zxyyee.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="https://zxyyee.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>部署分布式爬虫</title>
    <link href="https://zxyyee.cn/post/%E9%83%A8%E7%BD%B2%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB.html"/>
    <id>https://zxyyee.cn/post/部署分布式爬虫.html</id>
    <published>2019-01-22T11:14:09.000Z</published>
    <updated>2019-09-03T11:07:57.087Z</updated>
    
    <content type="html"><![CDATA[<p>pip install gerapy<br>配置环境变量：<br>C:\Users\Administrator\AppData\Roaming\Python\Python36\Scripts</p><p><code>gerapy init</code>  初始化工作目录<br><code>cd gerapy</code><br><code>gerapy migrate</code>    迁移生成数据库<br><code>gerapy runserver</code>   启动服务<br><a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a>  访问界面<br>———Gerapy 管理界面使用——–<br>添加client：连接远程或本机的scrapyd服务（前提是scrapyd处于开启状态）<br>添加Projects：将scarpy项目直接放到 /gerapy/projects，刷新页面</p>]]></content>
    
    <summary type="html">
    
      分布式
    
    </summary>
    
      <category term="爬虫" scheme="https://zxyyee.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zxyyee.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>FTP和SFTP</title>
    <link href="https://zxyyee.cn/post/FTP%E5%92%8CSFTP.html"/>
    <id>https://zxyyee.cn/post/FTP和SFTP.html</id>
    <published>2019-01-19T22:11:39.000Z</published>
    <updated>2019-09-03T11:09:03.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FTP、SFTP"><a href="#FTP、SFTP" class="headerlink" title="FTP、SFTP"></a>FTP、SFTP</h2><blockquote><p>TSL、SSL</p><p>正常模式：需要用户名密码交互，会有权限</p></blockquote><p>FTP:<br>文件传输协议（英文：File Transfer Protocol，缩写：FTP）是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。它属于网络传输协议的应用层。文件传送（file transfer）和文件访问（file access）之间的区别在于：前者由FTP提供，后者由如NFS等应用系统提供。<br>FTP是一个8位的客户端-服务器协议，能操作任何类型的文件而不需要进一步处理，就像MIME或Unicode一样。但是，FTP有着极高的延时，这意味着，从开始请求到第一次接收需求数据之间的时间，会非常长；并且不时的必须执行一些冗长的登录进程。</p><p>SFTP:<br>sftp是SSH File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的网络的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的其中一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol)的安全文件信息传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接和答复操作，所以从某种意义上来说，SFTP并不像一个服务器程序，而更像是一个客户端程序。SFTP同样是使用加密传输认证信息和传输的数据，所以，使用SFTP是非常安全的。但是，由于这种传输方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多。</p>]]></content>
    
    <summary type="html">
    
      传输
    
    </summary>
    
      <category term="传输协议" scheme="https://zxyyee.cn/categories/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="协议" scheme="https://zxyyee.cn/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux775权限</title>
    <link href="https://zxyyee.cn/post/Linux775%E6%9D%83%E9%99%90.html"/>
    <id>https://zxyyee.cn/post/Linux775权限.html</id>
    <published>2018-07-28T11:13:01.000Z</published>
    <updated>2019-09-03T11:08:37.810Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux权限：775"><a href="#Linux权限：775" class="headerlink" title="Linux权限：775"></a>Linux权限：775</h3><blockquote><p>rw-    r–    r–</p></blockquote><blockquote><p>文件所有者，文件所属组，其他用户</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1557893643709&di=954a84c3de9f257d572cfb57602cd688&imgtype=0&src=http%3A%2F%2Fs3.51cto.com%2Fwyfs02%2FM02%2F6B%2F87%2FwKiom1UvgaKjh86oAAI4Qn18ZeE502.jpg" alt="img"> </p></blockquote>]]></content>
    
    <summary type="html">
    
      Linux
    
    </summary>
    
      <category term="Linux" scheme="https://zxyyee.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://zxyyee.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>django自定义过滤器</title>
    <link href="https://zxyyee.cn/post/django%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8.html"/>
    <id>https://zxyyee.cn/post/django自定义过滤器.html</id>
    <published>2018-05-28T23:40:07.000Z</published>
    <updated>2019-09-03T11:09:24.265Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Django提供的过滤器和标签"><a href="#Django提供的过滤器和标签" class="headerlink" title="Django提供的过滤器和标签."></a>Django提供的过滤器和标签.</h4><p>例如：upper（转化为大写字母）</p><pre><code>lower（转化为小写字母）autoescape(自动转义)block（模板继承）csrf_token（防止跨站伪造请求）extends（模板继承）filter（过滤器）   等……</code></pre><h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><p>1.新建一个项目，建立一个app， 配置templates 添加html文件，配置static，添加需要的静态文件</p><p>配置views.py urls.py  ,然后启动服务器，保证项目的正常建立与运行，这里不多赘述</p><p>2.在app下创建templatetags文件夹  在文件夹内添加<strong>init</strong>.py  表明我们这是一个可引用的包</p><p>再创建一个myfilter.py 声明我们的自定义过滤器，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line"></span><br><span class="line">register=Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(value)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value+<span class="string">'that is nothing'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter   #注册过滤器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_length</span><span class="params">(value)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(value)&gt;<span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value[<span class="number">0</span>:<span class="number">5</span>]+<span class="string">'...'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag  #注册标签</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mytag</span><span class="params">(value1,value2)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> value1==<span class="string">'a'</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'百度'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> value2==<span class="string">'b'</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;h1&gt;一下&lt;/h1&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_current_time</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    time=datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">    time=time.strftime(<span class="string">'%Y-%m-%d %h:%M:%s'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;&#123;&#125;&lt;/h1&gt;'</span>.format(time)</span><br></pre></td></tr></table></figure><p>使用时在模板调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在模板中调用</span><br><span class="line">&#123;% load my_filter %&#125;</span><br><span class="line">&#123;&#123;name|my_str&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django
    
    </summary>
    
      <category term="Django" scheme="https://zxyyee.cn/categories/Django/"/>
    
    
      <category term="Django" scheme="https://zxyyee.cn/tags/Django/"/>
    
  </entry>
  
</feed>
